def ReturnOp : HIR_Op<"return", [ParentOneOf<["FuncOp","FuncExternOp"]>, Terminator]> {

  let summary = "Return from function";
  let description = [{
    This op returns the output of the function.
    This instruction must be the last instruction in the function.
      ```mlir hir.return (%x, %y): (i32, !hir.const<i1>)```
  }];

  let arguments = (ins Variadic<AnyType>:$operands);
  let builders = [OpBuilder<(ins),[{
    build($_builder,$_state,SmallVector<Value>());
  }]>];
  let assemblyFormat = [{ attr-dict (`(` $operands^ `)` `:` `(` type($operands) `)`)? }];
}

def FuncOp : HIR_Op<"func", 
  [Symbol, SingleBlockImplicitTerminator<"ReturnOp">, FunctionOpInterface, FuncLike,
  IsolatedFromAbove, CallableOpInterface, HasParent<"mlir::ModuleOp">,DeclareOpInterfaceMethods<RegionOp>]> {

  let summary = "Function definition";
  let description = [{
    This Op creates a new function 
      Example:

      ```mlir 
      hir.func @foo (%x, %A) at %t : (i4,!hir.memref<...>) -> (f32,!hir.time)
      ```
  }];

  let arguments = (ins
      TypeAttr:$function_type,
      StrAttr:$sym_name,
      TypeAttr:$funcTy,
      ArrayAttr:$argNames,
      OptionalAttr<ArrayAttr>:$resultNames
      );

  let regions = (region SizedRegion<1>:$body);
  let results = (outs );

  let builders = [OpBuilder<(ins "mlir::StringRef":$sym_name,
  "hir::FuncType":$funcTy, "ArrayAttr":$argNames, "ArrayAttr":$resultNames)>];

  let hasCustomAssemblyFormat = 1;
  let extraClassDeclaration = [{
    private:
      // FunctionOpInterface interface.
      public:
      mlir::FunctionType getFunctionType();
      hir::FuncType getFuncType();
      ArrayRef<Type> getArgumentTypes(); 
      ArrayRef<Type> getResultTypes() ;
      LogicalResult verifyType();
      LogicalResult verifyBody();
      Block *getBodyBlock() { return &body().front(); }
      public:
      //CallableOpInterface
      Region* getCallableRegion(){return &getOperation()->getRegion(0);}
      ArrayRef<Type> getCallableResults(){return getFuncType().getResultTypes();}

    public:
      Region& getFuncBody(){ return body();}
      ///Get the function arguments (excluding tstart).
      SmallVector<Value,4> getOperands();
      Value getRegionTimeVar(){
        return getFuncBody().getArguments().back();
      }
      void updateArguments(ArrayRef<DictionaryAttr>);
      llvm::Optional<Block*> getOptionalFuncBodyBlock(){ return &getFuncBody().front();}
  }];
  let hasVerifier = 1;
}

def FuncExternOp : HIR_Op<"func.extern", 
[Symbol, SingleBlockImplicitTerminator<"ReturnOp">, FuncLike, HasParent<"mlir::ModuleOp">]> {

  let summary = "Function declaration";
  let description = [{
    This Op declares a new external function.
      Example:
      ```mlir 
      hir.func.extern @foo (%x, %A) at %t : (i4,!hir.memref<...>) -> (f32,!hir.time)
      ```
  }];

let arguments = (ins
      TypeAttr:$function_type,
      StrAttr:$sym_name,
      TypeAttr:$funcTy,
      ArrayAttr:$argNames,
      OptionalAttr<ArrayAttr>:$resultNames
      );

  let regions = (region SizedRegion<1>:$body);
  let results = (outs );

  let builders = [OpBuilder<(ins "mlir::StringRef":$sym_name,
  "hir::FuncType":$funcTy, "ArrayAttr":$argNames, "ArrayAttr":$resultNames)>];


  let hasCustomAssemblyFormat = 1;
  let hasVerifier = 1;
  let extraClassDeclaration = [{
    public:
      //unsigned getNumFunctionArguments() ;
      //unsigned getNumFunctionResults() ;
      public:
      LogicalResult verifyType();

    public:
    //FuncLike op interface.
      hir::FuncType getFuncType(){return funcTy().dyn_cast<hir::FuncType>();}
      Region& getFuncBody(){ return body();}
      void updateArguments(ArrayRef<DictionaryAttr>);
  }];
  //let hasVerifier = 1;
}

def CallOp : HIR_Op<"call",
[CallOpInterface,DeclareOpInterfaceMethods<ScheduledOp>] > {
  let summary = "Function call";
  let description = [{
    This Op calls a function/module. 
      Example:

      ```mlir 
      %a,%b = hir.call @foo (%x,%A) at %ti : !hir.func<(i32,!hir.memref<...>) -> (i32,i32)>
      ```
  }];

  let arguments = (ins 
      FlatSymbolRefAttr:$callee, 
      StrAttr:$instance_name,
      TypeAttr: $funcTy,
      Variadic<AnyType>:$operands, 
      HIR_TimeType:$tstart,
      I64Attr: $offset
      );
  let results = (outs Variadic<AnyType> : $results);

  let hasCustomAssemblyFormat = 1;
  let hasCanonicalizeMethod = true;
  let hasVerifier = 1;
  let extraClassDeclaration=[{
    public:
      ///Get the function arguments (excluding tstart).
      SmallVector<Value,4> getOperands();
      hir::FuncType getFuncType(){return funcTy().dyn_cast<hir::FuncType>();}

    //CallOpInterface

    StringRef getCallee() { return callee(); }
    FunctionType getCalleeType() {return getFuncType().getFunctionType();}

    /// Get the argument operands to the called function.
    operand_range getArgOperands() {
      return {arg_operand_begin(), arg_operand_end()};
    }

    operand_iterator arg_operand_begin() { return operand_begin(); }
    operand_iterator arg_operand_end() { return operand_end(); }

    /// Return the callee of this operation.
    CallInterfaceCallable getCallableForCallee() {
      return (*this)->getAttrOfType<SymbolRefAttr>("callee");
    }

    /// Lookup the FuncOp/ExternalFuncOp for the callee. This returns null on invalid IR.
    Operation* getCalleeDecl() ;
  }];
}

def InstanceOp : HIR_Op<"instance",[]> {
  let summary = "Instantiate a new function.";
  let description = [{
    This Op creates an instance of a function. All uses of the instance will share the same hardware and internal state. 
      Example:

      ```mlir 
      %f = hir.instance @foo : !hir.func<(i32,!hir.memref<...>) -> (i32,i32 delay 1)>
      ```
  }];

  let arguments = (ins 
      FlatSymbolRefAttr:$callee, 
      TypeAttr: $funcTy
      );
  let results = (outs HIR_FuncType : $result);

  let assemblyFormat = [{ $callee custom<WithSSANames>(attr-dict) 
                            `:` $funcTy custom<CopyType>(type($result),ref($funcTy))}];
}

def CallInstanceOp : HIR_Op<"call_instance",
[DeclareOpInterfaceMethods<ScheduledOp>] > {
  let summary = "Call an already instantiated function.";
  let description = [{
    This Op calls a previously instantiated function. 
      Example:

      ```mlir 
      %a,%b = hir.call_instance %foo (%x,%A) at %ti : !hir.func<(i32,!hir.memref<...>) -> (i32,i32 delay 1)>
      ```
  }];

  let arguments = (ins 
      HIR_FuncType:$callee, 
      TypeAttr: $funcTy,
      Variadic<AnyType>:$operands, 
      HIR_TimeType:$tstart,
      I64Attr: $offset
      );
  let results = (outs Variadic<AnyType> : $results);

  let assemblyFormat = [{ $callee `(` $operands`)` `at` custom<TimeAndOffset>($tstart ,$offset) custom<WithSSANames>(attr-dict) 
                            `:` custom<FunctionType>($funcTy, type($operands), type($results)) custom<CopyType>(type($callee),ref($funcTy))}];
}